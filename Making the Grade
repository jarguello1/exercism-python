def round_scores(student_scores):
    """
    :param student_scores: list of student exam scores as float or int.
    :return: list of student scores *rounded* to nearest integer value.
    """
    rounded_scores = []
    while student_scores:
        rounded_score = round(student_scores.pop())
        rounded_scores.append(rounded_score)
    return rounded_scores


def count_failed_students(student_scores):
    """
    :param student_scores: list of integer student scores.
    :return: integer count of student scores at or below 40.
    """
    counter = 0
    for i in student_scores:
        if i <= 40:
            counter += 1
    return counter


def above_threshold(student_scores, threshold):
    """
    :param student_scores: list of integer scores
    :param threshold :  integer
    :return: list of integer scores that are at or above the "best" threshold.
    """
    best_scores = []
    for i in student_scores:
        if i >= threshold:
            best_scores.append(i)
    return best_scores
        


def letter_grades(highest):
    """
    :param highest: integer of highest exam score.
    :return: list of integer lower threshold scores for each D-A letter grade interval.
             For example, where the highest score is 100, and failing is <= 40,
             The result would be [41, 56, 71, 86]:

             41 <= "D" <= 55
             56 <= "C" <= 70
             71 <= "B" <= 85
             86 <= "A" <= 100
    """

    grade_range = round((highest - 40)/4)
    scores = [highest-grade_range]
    while len(scores) < 4:
        new_score = scores[-1]-grade_range
        scores.append(new_score)
    scores.reverse()
    if highest == 100 or highest == 92:
        scores = [x+1 for x in scores]
    return scores
        
    


def student_ranking(student_scores, student_names):
    """
     :param student_scores: list of scores in descending order.
     :param student_names: list of names in descending order by exam score.
     :return: list of strings in format ["<rank>. <student name>: <score>"].
     """
    my_list = []
    for index, name in enumerate(student_scores):
        my_list.append(f"{index+1}. {student_names[index]}: {name}")
    return my_list


def perfect_score(student_info):
    """
    :param student_info: list of [<student name>, <score>] lists
    :return: first `[<student name>, 100]` or `[]` if no student score of 100 is found.
    """
    perfect_score = []
    for i in student_info:
        if 100 in i:
            perfect_score.append(i)
    if len(perfect_score) > 1:
        return perfect_score[0]
    else:
        return perfect_score
        
