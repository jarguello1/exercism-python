def get_coordinate(record):
    """

    :param record: tuple - a (treasure, coordinate) pair.
    :return: str - the extracted map coordinate.
    """

    return record[1]


def convert_coordinate(coordinate):
    """

    :param coordinate: str - a string map coordinate
    :return:  tuple - the string coordinate seperated into its individual components.
    """

    split_coord = tuple(coordinate)
    return split_coord


def compare_records(azara_record, rui_record):
    """

    :param azara_record: tuple - a (treasure, coordinate) pair.
    :param rui_record: tuple - a (location, coordinate, quadrant) trio.
    :return: bool - True if coordinates match, False otherwise.
    """

    azara_coord = tuple(azara_record[1])
    rui_coord = rui_record[1]
    return azara_coord == rui_coord
        


def create_record(azara_record, rui_record):
    """

    :param azara_record: tuple - a (treasure, coordinate) pair.
    :param rui_record: tuple - a (location, coordinate, quadrant) trio.
    :return:  tuple - combined record, or "not a match" if the records are incompatible.
    """
    
    azara_coord = tuple(azara_record[1])
    rui_coord = rui_record[1]
    if azara_coord == rui_coord:
        return (azara_record + rui_record)
    if azara_coord != rui_coord:
        return "not a match"
    

def clean_up(combined_record_group):
    """

    :param combined_record_group: tuple of tuples - everything from both participants.
    :return: string of tuples separated by newlines - everything "cleaned". Excess coordinates and information removed.
    """
    cleaned_group =  [(group[0], group[2], group[3], group[4]) for group in combined_record_group]  
    lines = [f"{x}\n" for x in cleaned_group]
    return "".join(lines)
